AWSTemplateFormatVersion: "2010-09-09"
Description: Resources used by https://github.com/aws/karpenter
Parameters:
  ClusterName:
    Type: String
    Description: "EKS cluster name"
  EKSClusterSgId:
    Type: String
    Description: "EKS Cluster Security group ID"
  B64ClusterCA:
    Type: String
    Description: "EKS Cluster Certificate authority"
  APIServerURL:
    Type: String
    Description: "EKS Cluster API server endpoint"
  EKSDNS:
    Type: String
    Description: "EKS Cluster kube DNS IP address"
  NodeVolumeSize:
    Type: Number
    Default: 50
    Description: "Node volume size." 
  NodeImageId:
    Type: String
    Default: ""
    Description: "(Optional) Specify your own custom image ID. This value overrides any AWS Systems Manager Parameter Store value specified above."
  NodeImageIdSSMParam:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/eks/optimized-ami/1.21/amazon-linux-2/recommended/image_id
    Description: "AWS Systems Manager Parameter Store parameter of the AMI ID for the worker node instances. Change this value to match the version of Kubernetes you are using."
  DisableIMDSv1:
    Type: String
    Default: "false"
    AllowedValues:
      - "false"
      - "true"
Conditions:
  HasNodeImageId: !Not
    - "Fn::Equals":
      - !Ref NodeImageId
      - ""
  IMDSv1Disabled:
    "Fn::Equals":
      - !Ref DisableIMDSv1
      - "true"
Resources:
  KarpenterNodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: !Sub "KarpenterNodeInstanceProfile-${ClusterName}"
      Path: "/"
      Roles:
        - Ref: "KarpenterNodeRole"
  KarpenterNodeRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "KarpenterNodeRole-${ClusterName}"
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                !Sub "ec2.${AWS::URLSuffix}"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
  KarpenterControllerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "KarpenterControllerPolicy-${ClusterName}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource: "*"
            Action:
              # Write Operations
              - ec2:CreateLaunchTemplate
              - ec2:CreateFleet
              - ec2:RunInstances
              - ec2:CreateTags
              - iam:PassRole
              - ec2:TerminateInstances
              - ec2:DeleteLaunchTemplate
              # Read Operations
              - ec2:DescribeLaunchTemplates
              - ec2:DescribeInstances
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSubnets
              - ec2:DescribeInstanceTypes
              - ec2:DescribeInstanceTypeOfferings
              - ec2:DescribeAvailabilityZones
              - ssm:GetParameter
  NodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${ClusterName}-karpenter-launchtemplate"
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt KarpenterNodeInstanceProfile.Arn
        ImageId: !If
          - HasNodeImageId
          - !Ref NodeImageId
          - !Ref NodeImageIdSSMParam
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 20
              VolumeType: gp3
              DeleteOnTermination: true
          - DeviceName: /dev/xvdf
            Ebs:
              VolumeSize: !Ref NodeVolumeSize
              VolumeType: gp3
              DeleteOnTermination: true
          - DeviceName: /dev/xvdg
            Ebs:
              VolumeSize: !Ref NodeVolumeSize
              VolumeType: gp3
              DeleteOnTermination: true
          - DeviceName: /dev/xvdh
            Ebs:
              VolumeSize: !Ref NodeVolumeSize
              VolumeType: gp3
              DeleteOnTermination: true     
          - DeviceName: /dev/xvdi
            Ebs:
              VolumeSize: !Ref NodeVolumeSize
              VolumeType: gp3
              DeleteOnTermination: true     
        SecurityGroupIds: 
          - !Ref EKSClusterSgId
        MetadataOptions:
          HttpPutResponseHopLimit : 2
          HttpEndpoint: enabled
          HttpTokens: !If
            - IMDSv1Disabled
            - required
            - optional
        TagSpecifications:
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Sub ${ClusterName}-karpenter-node-volume 
        UserData: !Base64 
          Fn::Sub: |
            #!/bin/bash -xe
            /etc/eks/bootstrap.sh ${ClusterName} \
            --kubelet-extra-args '--node-labels=lables/app=kspark,karpenter.sh/discovery=${ClusterName},for-use-with-amazon-emr-managed-policies=true' \
            --b64-cluster-ca ${B64ClusterCA} \
            --apiserver-endpoint ${APIServerURL} \
            --dns-cluster-ip ${EKSDNS}

            echo "Mounting SSD/Volume to /var/lib/kubelet/pods"
            inx=1;for dev in /dev/nvme[1-9]n1;do mkfs.xfs $dev; mkdir -p /local$idx; echo $dev /local$idx xfs defaults,noatime 1 2 >> /etc/fstab; idx=$(($idx + 1)); done
            mount -a
            chown ec2-user:ec2-user /local*

Outputs:
  KarpenterNodeRoleArn:
    Description: Karpenter Node IAM Role ARN
    Value: !GetAtt KarpenterNodeRole.Arn
  KarpenterControllerPolicy:
    Description: Karpenter Controller IAM Policy ARN
    Value: !Ref KarpenterControllerPolicy
  KarpenterNodeInstanceProfileName:
    Description: Karpenter Node InstanceProfile Name
    Value: !Ref KarpenterNodeInstanceProfile
  KarpenterNodeLaunchTemplateId:
    Description: Karpenter Node Launch Template ID
    Value: !Ref NodeLaunchTemplate          
